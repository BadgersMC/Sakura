From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <kfian294ma4@gmail.com>
Date: Fri, 9 Aug 2024 20:43:53 +0100
Subject: [PATCH] Configurable left shooting and adjusting limits


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 42642b77213567e9bf6acb3728f75e76e3f3447c..09cdb4fb53552e23a4870649a6f834d9c2b36780 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -746,6 +746,24 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
         return Math.max(x, z) >= travelDistanceLimit;
     }
     // Sakura end - entity travel distance limits
+    // Sakura start - configurable left shooting and adjusting limits
+    public final void limitLeftShooting() {
+        Vec3 movement = this.getDeltaMovement();
+        int threshold = this.level.sakuraConfig().cannons.restrictions.leftShootingThreshold.or(-1);
+        if (threshold > 0 && (movement.x != 0.0 || movement.z != 0.0) && this.origin != null) {
+            double travelledX = Math.abs(this.getX() - this.origin.getX());
+            double travelledZ = Math.abs(this.getZ() - this.origin.getZ());
+            boolean xSmaller = travelledX < travelledZ; // intended
+
+            // Once entities have travelled past the threshold changing direction is restricted.
+            if (xSmaller && travelledX > threshold) {
+                this.setDeltaMovement(movement.multiply(1.0, 1.0, 0.0)); // limit z
+            } else if (!xSmaller && travelledZ > threshold) {
+                this.setDeltaMovement(movement.multiply(0.0, 1.0, 1.0)); // limit x
+            }
+        }
+    }
+    // Sakura end - configurable left shooting and adjusting limits
 
     public Entity(EntityType<?> type, Level world) {
         this.id = Entity.ENTITY_COUNTER.incrementAndGet();
@@ -1777,6 +1795,25 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
         final boolean xSmaller = this.physics == null || this.physics.afterOrEqual(1_14_0) ? Math.abs(x) < Math.abs(z)
             : this.physics.isLegacy() && Math.abs(x) > Math.abs(z);
         // Sakura end - physics version api
+        // Sakura start - configurable left shooting and adjusting limits
+        // NOTE: If scanAndCollide is made redundant by paper move this logic into CollisionUtil.
+        // This is being after xSmaller is intentional, we do not want to change the adjust direction.
+        int adjustDistance = this.level.sakuraConfig().cannons.restrictions.maxAdjustDistance.or(-1);
+        if (adjustDistance > 0) {
+            if (xSmaller) { // adjust z -> x
+                if (Math.abs(z) > adjustDistance) {
+                    // limit z adjust and remove momentum to replicate it hitting a block
+                    this.setDeltaMovement(this.getDeltaMovement().multiply(1.0, 1.0, 0.0));
+                    z = Math.floor(this.getZ() + Math.copySign(adjustDistance, z)) - this.getZ() + 0.5;
+                }
+            } else { // adjust x -> z
+                if (Math.abs(x) > adjustDistance) {
+                    this.setDeltaMovement(this.getDeltaMovement().multiply(0.0, 1.0, 1.0));
+                    x = Math.floor(this.getX() + Math.copySign(adjustDistance, x)) - this.getX() + 0.5;
+                }
+            }
+        }
+        // Sakura end - configurable left shooting and adjusting limits
 
         if (y != 0.0) {
             y = scanY(currBoundingBox, y, voxelList, bbList);
diff --git a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
index ab88fc1db9740ab249b332a6c01a6d6e2a998c1c..c7ee16e80eab05fb80cc8ad04315cc68fa933af5 100644
--- a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -257,6 +257,7 @@ public class FallingBlockEntity extends Entity {
                 // Sakura end - physics version api
             }
 
+            this.limitLeftShooting(); // Sakura - configurable left shooting and adjusting limits
             this.moveBasic(MoverType.SELF, this.getDeltaMovement()); // Sakura - optimise simple entity movement
             // Paper start - Configurable falling blocks height nerf
             if (this.level().paperConfig().fixes.fallingBlockHeightNerf.test(v -> this.getY() > v)) {
